<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FileFlushTask" Id="{215c2e0c-0696-4919-8295-f995eb8cbfe5}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'enable_dynamic_creation'}	
{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK FileFlushTask EXTENDS FileContentTask
VAR
	_ClassName : STRING := __POUNAME();

	_Closed : BOOL;
	_Close : Tc2_System.FB_FileClose;
	_Open : Tc2_System.FB_FileOpen;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{945d74c2-fbaf-443d-9592-2f5b94316c5f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{87ee6b89-12e5-4db3-853b-9e5b1bc63cff}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{f9201498-a61c-4ba0-908f-a21e8d1853d2}">
      <Declaration><![CDATA[METHOD Execute : BOOL
VAR_INPUT
	start : BOOL;
END_VAR
VAR
	//exceptionFactory : ExceptionFactory(__POUNAME(), ClassName, CurrentNamespace.Name);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF start THEN
	Validate();
	
	_Close(
		bExecute := FALSE,
		hFile := FileContentManager.FileHandle
	);
		
	_Open(
		bExecute := FALSE,
		sPathName := FileContentManager.FilePath,
		nMode := TO_DWORD(FileContentManager.OpenMode) OR TO_DWORD(FileContentManager.ContentHandlingMode),
		ePath := FileContentManager.PathType,
		sNetId := FilecontentManager.AmsNetId,
		tTimeout := Timeout
	);	
	
	_Closed := FALSE;	
END_IF

IF NOT _Closed THEN
	_Close(bExecute := TRUE);
	
	IF _Close.bError THEN
		//exceptionFactory.ThrowException(__POSITION(), WStringHelper.Concat2("File close for flush failed", GetErrorMessageByErrorId(_Close.nErrId)), _Close.nErrId);	
	ELSIF NOT _Close.bBusy THEN
		FileContentManager.FileHandle := 0;
		
		_Closed := TRUE;
	END_IF
END_IF
	
IF _Closed THEN
	_Open(bExecute := TRUE);
	
	IF _Open.bError THEN
		//exceptionFactory.ThrowException(__POSITION(), WStringHelper.Concat2("File open for flush failed", GetErrorMessageByErrorId(_Open.nErrId)), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION(), _Open.nErrId);	
	ELSIF NOT _Open.bBusy THEN
		FileContentManager.FileHandle := _Open.hFile;		
		
		Execute := EXECUTION_STATE.DONE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>