<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="SequentialTaskExecutor" Id="{b15464c1-820f-419b-b833-3fb448a1642b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK SequentialTaskExecutor EXTENDS ToolkitObject IMPLEMENTS IAbortableProcess
VAR
	_ClassName : STRING := __POUNAME();

	_Tasks : List(POINTER_TYPE.OBJECT_POINTER); // of POINTER TO Task  
	
	_ContinueOnTaskError : BOOL;

	_Busy : BOOL;
	_AbortRequested : BOOL;
	_Aborted : BOOL;
	_Error : BOOL;
	_ErrorMessage : ERROR_MESSAGE;
	_AbortReason : ERROR_MESSAGE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Service members" Id="{71a6050a-b35d-4e7f-986a-e3c197a59e46}" />
    <Property Name="Aborted" Id="{48dd5883-38e1-4ed7-ac45-8890af864301}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL Aborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{a7f13221-4dea-4dcf-aac5-2e6806496d6b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Aborted := _Aborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AbortReason" Id="{8143b43b-4f72-45e8-a647-e71b760d3a0b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY AbortReason : REFERENCE TO ERROR_MESSAGE]]></Declaration>
      <Get Name="Get" Id="{8f48fafa-3c4f-4f36-8ac2-ee53b26f3210}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AbortReason REF= _AbortReason;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="AddTask" Id="{1ddc06dd-e791-40bd-9793-0273ac58e922}">
      <Declaration><![CDATA[METHOD AddTask
VAR_INPUT
	task : REFERENCE TO Task; // instance should be managed by external logic
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT __ISVALIDREF(task) THEN
	RETURN;
END_IF

_Tasks.Append(ADR(task));]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{51046490-29bc-409e-b14e-0bd500ceb597}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL Busy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{744d1fb6-8734-4c73-95c3-55013a307b36}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _Busy;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ClassName" Id="{6a98787a-71c6-4478-a0d2-fdfcc0bde94d}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{4d0c9db1-17bc-492e-b71e-b2d8c7344182}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearInactiveTasks" Id="{d47d46b3-a29c-4bba-b2d4-d0048167b63a}">
      <Declaration><![CDATA[METHOD ClearInactiveTasks
VAR
	i : DINT;
	task : POINTER TO Task;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := _Tasks.Count - 1 TO 0 BY -1 DO
	IF i = 0 THEN
		task := _Tasks.Get(0);
		
		IF task^.State = TASK_STATE.EXECUTING OR_ELSE task^.State = TASK_STATE.ABORTING THEN
			CONTINUE;			
		END_IF
	END_IF
	
	_Tasks.RemoveAt(i, FALSE);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="ContinueOnTaskError" Id="{7ccbd4cb-8125-4f85-b946-5e096c4897ba}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL ContinueOnTaskError : BOOL
]]></Declaration>
      <Get Name="Get" Id="{9ffbc127-4897-4527-93e5-33764300eab9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ContinueOnTaskError := _ContinueOnTaskError;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{4545a0f9-28c4-4e12-972c-12412df0f15a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[_ContinueOnTaskError := ContinueOnTaskError;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{ae1bbc34-02a9-4708-b23e-b30267b5cc75}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{de9267df-4291-4d77-9769-cddbcc7e4364}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := _Error;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorMessage" Id="{d2525150-ab0c-411c-8044-fe8044240f66}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY FINAL ErrorMessage : REFERENCE TO ERROR_MESSAGE
]]></Declaration>
      <Get Name="Get" Id="{69e8e66e-480f-447d-924a-6931208b1734}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ErrorMessage REF= _ErrorMessage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{dd0b06c8-bb70-443d-82d8-5a8f59198530}">
      <Declaration><![CDATA[METHOD Execute 
VAR
	task : POINTER TO Task;
	taskManagerAbortMessage : ERROR_MESSAGE := "TaskManager aborted with reason: ";
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[START:

IF NOT Busy OR_ELSE _Tasks.Count = 0 THEN
	RETURN;
END_IF

task := _Tasks.Get(0);

__TRY
	CASE task^.State OF
		TASK_STATE.EXECUTING:
			IF _AbortRequested THEN
				_AbortRequested := FALSE;
				
				IF task^.RequestAbort(TRUE) THEN
					task^.State := TASK_STATE.ABORTED;
				ELSE
					RETURN;
				END_IF
			ELSE
				IF task^.Execute(FALSE) THEN
					task^.State := TASK_STATE.DONE;
				ELSE
					RETURN;
				END_IF		
			END_IF

			_Tasks.Remove(task, FALSE);
							
		TASK_STATE.ABORTING:
			IF task^.RequestAbort(FALSE) THEN
				task^.State := TASK_STATE.ABORTED;
				
				_Tasks.Remove(task, FALSE);
			ELSE
				RETURN;
			END_IF
		ELSE
			task^.AbortReason := "";
			task^.ErrorMessage := "";
			
			IF task^.Execute(TRUE) THEN
				task^.State := TASK_STATE.DONE;

				_Tasks.Remove(task, FALSE);
			ELSE
				RETURN;
			END_IF
	END_CASE	
	
	_Tasks.Remove(task, FALSE);	
__CATCH
	task^.ErrorMessage := ExceptionHelper.LastException.ToString(FALSE);
	task^.State := TASK_STATE.ERROR;
	
	_Tasks.Remove(task, FALSE);

	IF NOT ContinueOnTaskError THEN
		setError(ExceptionHelper.LastException.ToString(FALSE));		
		ExceptionHelper.LastException.Throw();
	END_IF	
__ENDTRY

JMP START;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RequestAbort" Id="{0f00df1e-9306-4979-b0c6-a3618c357788}">
      <Declaration><![CDATA[METHOD RequestAbort
VAR_INPUT 
	reason : ERROR_MESSAGE;
END_VAR
VAR
	task : POINTER TO Task;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Busy THEN	
	_AbortReason := reason;
	
	IF _Tasks.Count > 0 THEN
		task := _Tasks.Get(0);
		
		IF task^.State = TASK_STATE.EXECUTING THEN
			_AbortRequested := TRUE;
			RETURN;
		END_IF
	END_IF

	setAborted();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="setAborted" Id="{21449bbc-1a0e-417b-b51e-95651b1a159c}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE setAborted
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Busy := FALSE;
_AbortRequested := FALSE;
_Aborted := TRUE;
_Error := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setBusy" Id="{d2776870-60b8-457b-9196-0a0f6d87b360}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE setBusy
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Busy := TRUE;
_AbortRequested := FALSE;
_Aborted := FALSE;
_Error := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setError" Id="{d3cf674b-3dd0-49f4-9e69-c74490bbda41}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE setError
VAR_IN_OUT CONSTANT
	errorMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Busy := FALSE;
_AbortRequested := FALSE;
_Aborted := FALSE;
_Error := TRUE;

IF __ISVALIDREF(errorMessage) THEN
	_ErrorMessage := errorMessage;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{fe085021-b483-439f-92c4-c87b89e49ff7}">
      <Declaration><![CDATA[METHOD Start]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Busy THEN
	//exceptionFactory.ThrowException(__POSITION(), "Task manager in aborting state", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION()).Throw();
END_IF

_ErrorMessage := "";
_AbortReason := "";
setBusy();

Start := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>