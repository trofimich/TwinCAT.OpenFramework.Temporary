<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="OpcUaCommunicator" Id="{432957eb-55e1-407e-ae46-c9392eb0a7d4}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK OpcUaCommunicator EXTENDS Communicator
VAR
	{attribute 'OPC.UA.DA' := '0'}	
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}	
	_State : OPC_UA_COMMUNICATOR_STATE;	
	{attribute 'OPC.UA.DA' := '0'}	
	_DataProcessed : BOOL;

	{attribute 'OPC.UA.DA' := '0'}	
	_Connect : Tc3_PLCopen_OpcUa.UA_Connect;

	{attribute 'OPC.UA.DA' := '0'}
	_NamespaceUris : Dictionary(POINTER_TYPE.STRING_POINTER, POINTER_TYPE.STRUCT_POINTER, 0); // of STRING(MAX) and UA_GetNamespaceIndex

	{attribute 'OPC.UA.DA' := '0'}	
	_RequestItems : List(POINTER_TYPE.OBJECT_POINTER); // of POINTER TO OpcUaRequestItem
	
	{attribute 'OPC.UA.DA' := '0'}	
	_Disconnect : Tc3_PLCopen_OpcUa.UA_Disconnect;

	{attribute 'OPC.UA.DA' := '0'}
	_TimeoutTimer : Timer;	
	{attribute 'OPC.UA.DA' := '0'}	
	_OperationTimer : Timer;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
]]></ST>
    </Implementation>
    <Folder Name="Internal overrides" Id="{6dc36fdd-7466-0db6-32c9-ce584876fd4e}" />
    <Folder Name="Service members" Id="{2f468da7-d264-0c87-2bad-dbacb2b910cf}" />
    <Method Name="AddMethodCallByNamespaceIndex" Id="{cbe23a3f-2cb0-4976-9f81-aae43c36cc6b}">
      <Declaration><![CDATA[METHOD AddMethodCallByNamespaceIndex : DINT
VAR_INPUT
	objectNamespaceIndex : UINT; 
	objectIdentifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	objectIdentifier : STRING(Tc2_System.MAX_STRING_LENGTH);	
	methodNamespaceIndex : UINT; 
	methodIdentifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	methodIdentifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	inputArgumentInfosAddress : POINTER TO ST_UAMethodArgInfo;
	inputArgumentInfosSize : UDINT;
	inputConstantArgumentsAddress : PVOID;
	inputConstantArgumentsSize : UDINT;
	inputDynamicArgumentsAddress : PVOID;
	inputDynamicArgumentsSize : UDINT;
	outputArgumentInfosAddress : POINTER TO ST_UAMethodArgInfo;
	outputArgumentInfosSize : UDINT;
	outputArgumentsInfoAndDataAddress : POINTER TO OPC_UA_OUTPUT_ARGUMENT_INFO_AND_DATA;
	outputArgumentsInfoAndDataSize : UDINT;
	numberOfReceivedBytesCount : POINTER TO UDINT;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	requestItem : POINTER TO OpcUaMethodCallRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddMethodCallByNamespaceIndex := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "OpcUaRequest is executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

_TimeoutTimer.Interval := _TimeoutTimer.Interval + operationTimeout;

requestItem := __NEW(OpcUaMethodCallRequestItem);

requestItem^.Initialize(
	objectNamespaceUri := '',
	objectNamespaceIndex := objectNamespaceIndex,
	objectIdentifierType := objectIdentifierType,
	objectIdentifier := objectIdentifier,	
	methodNamespaceUri := '',
	methodNamespaceIndex := methodNamespaceIndex,
	methodIdentifierType := methodIdentifierType,
	methodIdentifier := methodIdentifier,
	inputArgumentInfosAddress := inputArgumentInfosAddress,
	inputArgumentInfosSize := inputArgumentInfosSize,
	inputConstantArgumentsAddress := inputConstantArgumentsAddress,
	inputConstantArgumentsSize := inputConstantArgumentsSize,
	inputDynamicArgumentsAddress := inputDynamicArgumentsAddress,
	inputDynamicArgumentsSize := inputDynamicArgumentsSize,
	outputArgumentInfosAddress := outputArgumentInfosAddress,
	outputArgumentInfosSize := outputArgumentInfosSize,
	outputArgumentsInfoAndDataAddress := outputArgumentsInfoAndDataAddress,
	outputArgumentsInfoAndDataSize := outputArgumentsInfoAndDataSize,
	numberOfReceivedBytesCount := numberOfReceivedBytesCount,
	operationTimeout := operationTimeout
);

AddMethodCallByNamespaceIndex := _RequestItems.Append(requestItem);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddMethodCallByNamespaceUri" Id="{275357f6-386f-442f-9a87-ea983a9693dd}">
      <Declaration><![CDATA[METHOD AddMethodCallByNamespaceUri : DINT
VAR_INPUT
	objectNamespaceUri : STRING(Tc2_System.MAX_STRING_LENGTH); 
	objectIdentifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	objectIdentifier : STRING(Tc2_System.MAX_STRING_LENGTH);	
	methodNamespaceUri : STRING(Tc2_System.MAX_STRING_LENGTH); 
	methodIdentifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	methodIdentifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	inputArgumentInfosAddress : POINTER TO ST_UAMethodArgInfo;
	inputArgumentInfosSize : UDINT;
	inputConstantArgumentsAddress : PVOID;
	inputConstantArgumentsSize : UDINT;
	inputDynamicArgumentsAddress : PVOID;
	inputDynamicArgumentsSize : UDINT;
	outputArgumentInfosAddress : POINTER TO ST_UAMethodArgInfo;
	outputArgumentInfosSize : UDINT;
	outputArgumentsInfoAndDataAddress : POINTER TO OPC_UA_OUTPUT_ARGUMENT_INFO_AND_DATA;
	outputArgumentsInfoAndDataSize : UDINT;
	numberOfReceivedBytesCount : POINTER TO UDINT;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	namespaceUriPointer : POINTER TO STRING(MAX_STRING_LENGTH);
	getNamespaceIndex : POINTER TO Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex;
	requestItem : POINTER TO OpcUaMethodCallRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddMethodCallByNamespaceUri := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "OpcUaRequest is executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

IF objectNamespaceUri = '' THEN
	ExceptionHelper.Throw(0, "Parameter 'objectNamespaceUri' is empty", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

IF methodNamespaceUri = '' THEN
	ExceptionHelper.Throw(0, "Parameter 'methodNamespaceUri' is empty", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

_TimeoutTimer.Interval := _TimeoutTimer.Interval + operationTimeout;

// try get existing object namespace index request
getNamespaceIndex := _NamespaceUris.GetValueByKey(ADR(objectNamespaceUri));

IF getNamespaceIndex <> 0 THEN
	IF operationTimeout > getNamespaceIndex^.Timeout THEN
		getNamespaceIndex^.Timeout := operationTimeout;	
	END_IF
// if not exists then create new request
ELSE
	namespaceUriPointer := __NEW(STRING(MAX_STRING_LENGTH));
	namespaceUriPointer^ := objectNamespaceUri;
	
	getNamespaceIndex := __NEW(Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex);
	getNamespaceIndex^.NamespaceUri := objectNamespaceUri;
	getNamespaceIndex^.Timeout := operationTimeout;	
	
	_NamespaceUris.Set(namespaceUriPointer, getNamespaceIndex, TRUE, TRUE);
END_IF

// try get existing method namespace index request
getNamespaceIndex := _NamespaceUris.GetValueByKey(ADR(methodNamespaceUri));

IF getNamespaceIndex <> 0 THEN
	IF operationTimeout > getNamespaceIndex^.Timeout THEN
		getNamespaceIndex^.Timeout := operationTimeout;	
	END_IF
// if not exists then create new request
ELSE
	namespaceUriPointer := __NEW(STRING(MAX_STRING_LENGTH));
	namespaceUriPointer^ := methodNamespaceUri;
	
	getNamespaceIndex := __NEW(Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex);
	getNamespaceIndex^.NamespaceUri := methodNamespaceUri;
	getNamespaceIndex^.Timeout := operationTimeout;	
	
	_NamespaceUris.Set(namespaceUriPointer, getNamespaceIndex, TRUE, TRUE);
END_IF

requestItem := __NEW(OpcUaMethodCallRequestItem);

requestItem^.Initialize(
	objectNamespaceUri := objectNamespaceUri,
	objectNamespaceIndex := 0,
	objectIdentifierType := objectIdentifierType,
	objectIdentifier := objectIdentifier,	
	methodNamespaceUri := methodNamespaceUri,
	methodNamespaceIndex := 0,
	methodIdentifierType := methodIdentifierType,
	methodIdentifier := methodIdentifier,
	inputArgumentInfosAddress := inputArgumentInfosAddress,
	inputArgumentInfosSize := inputArgumentInfosSize,
	inputConstantArgumentsAddress := inputConstantArgumentsAddress,
	inputConstantArgumentsSize := inputConstantArgumentsSize,
	inputDynamicArgumentsAddress := inputDynamicArgumentsAddress,
	inputDynamicArgumentsSize := inputDynamicArgumentsSize,
	outputArgumentInfosAddress := outputArgumentInfosAddress,
	outputArgumentInfosSize := outputArgumentInfosSize,
	outputArgumentsInfoAndDataAddress := outputArgumentsInfoAndDataAddress,
	outputArgumentsInfoAndDataSize := outputArgumentsInfoAndDataSize,
	numberOfReceivedBytesCount := numberOfReceivedBytesCount,
	operationTimeout := operationTimeout
);

AddMethodCallByNamespaceUri := _RequestItems.Append(requestItem);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddReadByNamespaceIndex" Id="{c7fea95d-ded4-4949-b174-7c2f36d355ee}">
      <Declaration><![CDATA[METHOD AddReadByNamespaceIndex : DINT
VAR_INPUT
	namespaceIndex : UINT;
	identifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	identifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	nodeAdditionalInfo : Tc3_PLCopen_OpcUa.ST_UANodeAdditionalInfo;
	targetVariable : ANY;
	receivedBytesCountTarget : POINTER TO UDINT;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	requestItem : POINTER TO OpcUaDAReadRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddReadByNamespaceIndex := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "OpcUaRequest is executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

_TimeoutTimer.Interval := _TimeoutTimer.Interval + operationTimeout;

requestItem := __NEW(OpcUaDAReadRequestItem);

requestItem^.Initialize(
	namespaceUri := '',
	namespaceIndex := namespaceIndex,
	identifierType := identifierType,
	identifier := identifier,
	nodeAdditionalInfo := nodeAdditionalInfo,
	targetVariable := targetVariable,
	numberOfReceivedBytesCount := receivedBytesCountTarget,
	operationTimeout := operationTimeout
);

AddReadByNamespaceIndex := _RequestItems.Append(requestItem);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddReadByNamespaceUri" Id="{49d6e33e-cc0d-4ccc-8b39-672b30282275}">
      <Declaration><![CDATA[METHOD AddReadByNamespaceUri : DINT
VAR_INPUT
	namespaceUri : STRING(Tc2_System.MAX_STRING_LENGTH);
	identifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	identifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	nodeAdditionalInfo : Tc3_PLCopen_OpcUa.ST_UANodeAdditionalInfo;
	targetVariable : ANY;
	receivedBytesCountTarget : POINTER TO UDINT;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	namespaceUriPointer : POINTER TO STRING(MAX_STRING_LENGTH);
	getNamespaceIndex : POINTER TO Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex;
	requestItem : POINTER TO OpcUaDAReadRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddReadByNamespaceUri := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "OpcUaRequest is executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

IF namespaceUri = '' THEN
	ExceptionHelper.Throw(0, "Parameter 'namespaceUri' is empty", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

_TimeoutTimer.Interval := _TimeoutTimer.Interval + operationTimeout;

// try get existing namespace index request
getNamespaceIndex := _NamespaceUris.GetValueByKey(ADR(namespaceUri));

IF getNamespaceIndex <> 0 THEN
	IF operationTimeout > getNamespaceIndex^.Timeout THEN
		getNamespaceIndex^.Timeout := operationTimeout;	
	END_IF
// if not exists then create new request
ELSE
	namespaceUriPointer := __NEW(STRING(MAX_STRING_LENGTH));
	namespaceUriPointer^ := namespaceUri;
	
	getNamespaceIndex := __NEW(Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex);
	getNamespaceIndex^.NamespaceUri := namespaceUri;
	getNamespaceIndex^.Timeout := operationTimeout;	
	
	_NamespaceUris.Set(namespaceUriPointer, getNamespaceIndex, TRUE, TRUE);
END_IF

requestItem := __NEW(OpcUaDAReadRequestItem);

requestItem^.Initialize(
	namespaceUri := namespaceUri,
	namespaceIndex := 0,
	identifierType := identifierType,
	identifier := identifier,
	nodeAdditionalInfo := nodeAdditionalInfo,
	targetVariable := targetVariable,
	numberOfReceivedBytesCount := receivedBytesCountTarget,
	operationTimeout := operationTimeout
);

AddReadByNamespaceUri := _RequestItems.Append(requestItem);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddWriteByNamespaceIndex" Id="{a861a42e-3643-42a7-bd7d-4bec92758ce7}">
      <Declaration><![CDATA[METHOD AddWriteByNamespaceIndex : DINT
VAR_INPUT
	namespaceIndex : UINT;
	identifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	identifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	nodeAdditionalInfo : Tc3_PLCopen_OpcUa.ST_UANodeAdditionalInfo;
	sourceVariable : ANY;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	requestItem : POINTER TO OpcUaDAWriteRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddWriteByNamespaceIndex := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "OpcUaRequest is executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

_TimeoutTimer.Interval := _TimeoutTimer.Interval + operationTimeout;

requestItem := __NEW(OpcUaDAWriteRequestItem);

requestItem^.Initialize(
	namespaceUri := '',
	namespaceIndex := namespaceIndex,
	identifierType := identifierType,
	identifier := identifier,
	nodeAdditionalInfo := nodeAdditionalInfo,
	sourceVariable := sourceVariable,
	operationTimeout := operationTimeout
);

AddWriteByNamespaceIndex := _RequestItems.Append(requestItem);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddWriteByNamespaceUri" Id="{4a1ac3f3-7237-4efe-a35b-c4939221c55f}">
      <Declaration><![CDATA[METHOD AddWriteByNamespaceUri : DINT
VAR_INPUT
	namespaceUri : STRING(Tc2_System.MAX_STRING_LENGTH);
	identifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	identifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	nodeAdditionalInfo : Tc3_PLCopen_OpcUa.ST_UANodeAdditionalInfo;
	sourceVariable : ANY;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	namespaceUriPointer : POINTER TO STRING(MAX_STRING_LENGTH);
	getNamespaceIndex : POINTER TO Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex;
	requestItem : POINTER TO OpcUaDAWriteRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddWriteByNamespaceUri := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "OpcUaRequest is executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

IF namespaceUri = '' THEN
	ExceptionHelper.Throw(0, "Parameter 'namespaceUri' is empty", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

_TimeoutTimer.Interval := _TimeoutTimer.Interval + operationTimeout;

// try get existing namespace index request
getNamespaceIndex := _NamespaceUris.GetValueByKey(ADR(namespaceUri));

IF getNamespaceIndex <> 0 THEN
	IF operationTimeout > getNamespaceIndex^.Timeout THEN
		getNamespaceIndex^.Timeout := operationTimeout;	
	END_IF
// if not exists then create new request
ELSE
	namespaceUriPointer := __NEW(STRING(MAX_STRING_LENGTH));
	namespaceUriPointer^ := namespaceUri;
	
	getNamespaceIndex := __NEW(Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex);
	getNamespaceIndex^.NamespaceUri := namespaceUri;
	getNamespaceIndex^.Timeout := operationTimeout;	
	
	_NamespaceUris.Set(namespaceUriPointer, getNamespaceIndex, TRUE, TRUE);
END_IF

requestItem := __NEW(OpcUaDAWriteRequestItem);

requestItem^.Initialize(
	namespaceUri := namespaceUri,
	namespaceIndex := 0,
	identifierType := identifierType,
	identifier := identifier,
	nodeAdditionalInfo := nodeAdditionalInfo,
	sourceVariable := sourceVariable,
	operationTimeout := operationTimeout
);

AddWriteByNamespaceUri := _RequestItems.Append(requestItem);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{8a48b83d-7a11-4a56-9b9e-4888d677c49b}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Property' := '1'}
PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{a204a233-e0e0-4e9a-bea5-696c7950b1d9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _State <> OPC_UA_COMMUNICATOR_STATE.IDLE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ClassName" Id="{b3537f54-bee1-4df0-a39b-74829ad3fa8f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{a1da86a6-5dab-43d0-a4c3-514b17724972}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="closeConnection" Id="{0a4d85e8-ddab-4762-b15f-219119b80145}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE closeConnection : OPC_UA_ACTION_EXECUTION_STATE]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Connect(Execute := FALSE);
_Disconnect(Execute := TRUE, ConnectionHdl := _Connect.ConnectionHdl);

IF _Disconnect.Error THEN	
	IF _LastException.Empty THEN
		_LastExceptionHelper.Throw(_Disconnect.ErrorID, WCONCAT("UA_Disconnect error ", TO_WSTRING(_Disconnect.ErrorID)), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	END_IF
 
	closeConnection := OPC_UA_ACTION_EXECUTION_STATE.ERROR;
ELSIF _Disconnect.Done THEN
	closeConnection := OPC_UA_ACTION_EXECUTION_STATE.DONE;
ELSE
	closeConnection := OPC_UA_ACTION_EXECUTION_STATE.BUSY;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CommunicationTypeName" Id="{1ff65b2e-d2b0-41cf-89d7-340204cacca9}">
      <Declaration><![CDATA[PROPERTY CommunicationTypeName : STRING]]></Declaration>
      <Get Name="Get" Id="{eb72e7a5-de78-4b68-869e-fc5d14526134}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CommunicationTypeName := 'OPC-UA';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DataProcessed" Id="{f5fddebc-8e57-48b7-98a7-6259f4ed1596}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Property' := '1'}
PROPERTY DataProcessed : BOOL]]></Declaration>
      <Get Name="Get" Id="{4ce7e9e7-a893-4abd-8f6a-c063b6170c1a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataProcessed := _DataProcessed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{aadc6521-d54d-4d94-9938-1e2715b2c448}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Property' := '1'}
PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{697fe58f-8dad-40c1-8356-4b9c5c9e7c93}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := _State = OPC_UA_COMMUNICATOR_STATE.IDLE AND_THEN NOT _LastException.Empty;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{24f3d3da-9ae1-4404-89fb-d933027bfdf9}">
      <Declaration><![CDATA[METHOD Execute
VAR
	prevState : OPC_UA_COMMUNICATOR_STATE;
END_VAR
VAR
	actionState : OPC_UA_ACTION_EXECUTION_STATE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[prevState := _State;
_DataProcessed := FALSE;
_OperationTimer.Execute();

StateMachine:

// state machine logic
CASE _State OF
	OPC_UA_COMMUNICATOR_STATE.CONNECT:
		actionState := openConnection();
		
		CASE actionState OF
			OPC_UA_ACTION_EXECUTION_STATE.DONE:
				_State := OPC_UA_COMMUNICATOR_STATE.GET_NAMESPACE_INDEX;
				JMP StateMachine;
			
			OPC_UA_ACTION_EXECUTION_STATE.ERROR:
				_State := OPC_UA_COMMUNICATOR_STATE.IDLE;
				RETURN;
		END_CASE
	
	OPC_UA_COMMUNICATOR_STATE.GET_NAMESPACE_INDEX:
		actionState := getNamespaceIndex();
		
		CASE actionState OF
			OPC_UA_ACTION_EXECUTION_STATE.DONE:
				_State := OPC_UA_COMMUNICATOR_STATE.GET_NODE_HANDLE;
				JMP StateMachine;
			
			OPC_UA_ACTION_EXECUTION_STATE.ERROR:
				_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
				JMP StateMachine;
		END_CASE	
		
	OPC_UA_COMMUNICATOR_STATE.GET_NODE_HANDLE:
		actionState := getNodeHandle();
		
		CASE actionState OF
			OPC_UA_ACTION_EXECUTION_STATE.DONE:
				_State := OPC_UA_COMMUNICATOR_STATE.PERFORM_ACTION;
				_OperationTimer.Start();
				JMP StateMachine;
			
			OPC_UA_ACTION_EXECUTION_STATE.ERROR:
				_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
				JMP StateMachine;
		END_CASE
	
	OPC_UA_COMMUNICATOR_STATE.PERFORM_ACTION:
		actionState := performAction();
		
		CASE actionState OF
			OPC_UA_ACTION_EXECUTION_STATE.DONE:
				_DataProcessed := TRUE;	
				CycleCount := CycleCount + 1;
				
				IF CyclicMode THEN
					_State := OPC_UA_COMMUNICATOR_STATE.WAIT_FOR_NEXT_CYCLE;			
					JMP StateMachine;			
				ELSE	
					_State := OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE;		
				END_IF
			
			OPC_UA_ACTION_EXECUTION_STATE.ERROR:
				_State := OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE;
				JMP StateMachine;
		END_CASE	

	OPC_UA_COMMUNICATOR_STATE.WAIT_FOR_NEXT_CYCLE:
		IF NOT _DataProcessed AND_THEN _OperationTimer.Interval >= CycleInterval THEN	
			resetAction();
			_State := OPC_UA_COMMUNICATOR_STATE.PERFORM_ACTION;				
			_OperationTimer.Start();
			JMP StateMachine;	
		END_IF	
	
	OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE:
		actionState := releaseNodeHandle();
		
		CASE actionState OF
			OPC_UA_ACTION_EXECUTION_STATE.DONE, OPC_UA_ACTION_EXECUTION_STATE.ERROR:
				_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
				JMP StateMachine;
		END_CASE	
	
	OPC_UA_COMMUNICATOR_STATE.DISCONNECT:
		actionState := closeConnection();
		
		IF actionState = OPC_UA_ACTION_EXECUTION_STATE.DONE OR_ELSE actionState = OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
			_State := OPC_UA_COMMUNICATOR_STATE.IDLE;			
		END_IF
END_CASE

// check operation timeout (except for connect and disconnect)
IF Busy 
	AND_THEN _State <> OPC_UA_COMMUNICATOR_STATE.CONNECT 
	AND_THEN _State <> OPC_UA_COMMUNICATOR_STATE.DISCONNECT 
	AND_THEN _State <> OPC_UA_COMMUNICATOR_STATE.WAIT_FOR_NEXT_CYCLE 
THEN
	IF prevState <> _State THEN
		_TimeoutTimer.Start();
	ELSE
		_TimeoutTimer.Execute();
		
		IF _TimeoutTimer.Done THEN			
			IF _LastException.Empty THEN
				_LastExceptionHelper.Throw(1817, WCONCAT("Operation timeout in state ", TO_WSTRING(_State)), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
			END_IF
			
			CASE _State OF
				OPC_UA_COMMUNICATOR_STATE.GET_NAMESPACE_INDEX:
					_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
				
				OPC_UA_COMMUNICATOR_STATE.GET_NODE_HANDLE:
					_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
				
				OPC_UA_COMMUNICATOR_STATE.PERFORM_ACTION:
					_State := OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE;
					
				OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE:
					_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
			END_CASE			
		END_IF
	END_IF	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{cd8be057-8075-49f8-944c-0ff337ecc7f9}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_NamespaceUris.Clear(TRUE, TRUE);
_RequestItems.Clear(TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNamespaceIndex" Id="{2b3d6e6e-aa34-4205-95c8-95dee47b315c}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD getNamespaceIndex : OPC_UA_ACTION_EXECUTION_STATE
VAR
	i, j : DINT;
	functionBlock : POINTER TO Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex;
	request : POINTER TO OpcUaDARequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[getNamespaceIndex := OPC_UA_ACTION_EXECUTION_STATE.DONE;

FOR i := 0 TO _NamespaceUris.Count - 1 DO
	functionBlock := _NamespaceUris.GetValueByIndex(i);
	
	functionBlock^(Execute := TRUE, ConnectionHdl := _Connect.ConnectionHdl);

	IF functionBlock^.Error THEN
		IF getNamespaceIndex <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN		
			IF _LastException.Empty THEN
				_LastExceptionHelper.Throw(functionBlock^.ErrorID, WStringHelper.Concat5("UA_GetNamespaceIndex error ", TO_WSTRING(functionBlock^.ErrorID), " (NamespaceUri = '", TO_WSTRING(functionBlock^.NamespaceUri), "')"), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());				
			END_IF
		
			getNamespaceIndex := OPC_UA_ACTION_EXECUTION_STATE.ERROR;			
		END_IF
		
		AdsLogger.LogMessage(LOGGING_LEVEL.INFORMATION, WStringHelper.Concat3("---OpcUaRequest getNamespaceIndex error: ", "UA_GetNamespaceIndex error ", TO_WSTRING(functionBlock^.ErrorID)));
	ELSIF functionBlock^.Done THEN
		FOR j := 0 TO _RequestItems.Count - 1 DO
			request := _RequestItems.Get(j);
			request^.SetNamespaceIndexForNamespaceUri(functionBlock^.NamespaceUri, functionBlock^.NamespaceIndex);
		END_FOR
	ELSE
		IF getNamespaceIndex <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
			getNamespaceIndex := OPC_UA_ACTION_EXECUTION_STATE.BUSY;			
		END_IF			
	END_IF
END_FOR

IF getNamespaceIndex = OPC_UA_ACTION_EXECUTION_STATE.DONE THEN
	AdsLogger.LogMessage(LOGGING_LEVEL.INFORMATION, "---OpcUaRequest getNamespaceIndex done");	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNodeHandle" Id="{1dd1c31e-1654-4a35-87b1-c8075834384d}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD getNodeHandle : OPC_UA_ACTION_EXECUTION_STATE
VAR
	i : DINT;
	requestItem : POINTER TO OpcUaRequestItem;
	requestItemState : OPC_UA_ACTION_EXECUTION_STATE;	
	exception : Exception;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[getNodeHandle := OPC_UA_ACTION_EXECUTION_STATE.DONE;

FOR i := 0 TO _RequestItems.Count - 1 DO
	requestItem := _RequestItems.Get(i);
	
	requestItemState := requestItem^.GetHandle(_Connect.ConnectionHdl, exception => exception);
	
	CASE requestItemState OF
		OPC_UA_ACTION_EXECUTION_STATE.BUSY:
			IF getNodeHandle <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
				getNodeHandle := OPC_UA_ACTION_EXECUTION_STATE.BUSY;			
			END_IF
							
		OPC_UA_ACTION_EXECUTION_STATE.ERROR:
			IF getNodeHandle <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
				IF _LastException.Empty THEN
					_LastException := exception;				
				END_IF
				
				getNodeHandle := OPC_UA_ACTION_EXECUTION_STATE.ERROR;							
			END_IF
	END_CASE
END_FOR

IF getNodeHandle = OPC_UA_ACTION_EXECUTION_STATE.DONE THEN
	AdsLogger.LogMessage(LOGGING_LEVEL.INFORMATION, "---OpcUaRequest getNodeHandle done");
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalClear" Id="{2d5cc120-108c-4c36-8040-896b0dfa2598}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalClear : BOOL
VAR_OUTPUT
	exception : Exception;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_NamespaceUris.Clear(TRUE, TRUE);
_RequestItems.Clear(TRUE);

InternalClear := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalConfigure" Id="{93e41d3f-26f8-434a-b628-b63dc5cbc2ba}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalConfigure : BOOL
VAR_INPUT
	settings : REFERENCE TO CommunicationSettings;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	opcUaSettings : POINTER TO OpcUaCommunicationSettings;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[opcUaSettings := ADR(settings);

IF opcUaSettings^.ServerUrl = '' THEN
	ExceptionHelper.Throw(0, "settings.ServerUrl is empty", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

_Connect.ServerUrl := opcUaSettings^.ServerUrl;
_Connect.SessionConnectInfo := opcUaSettings^.SessionConnectInfo;
_Connect.Timeout := opcUaSettings^.ConnectionTimeout;
_Disconnect.Timeout := opcUaSettings^.ConnectionTimeout;

_TimeoutTimer.Interval := opcUaSettings^.ConnectionTimeout;

InternalConfigure := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalStart" Id="{95c58d15-baef-4848-8208-74849d36b324}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalStart : BOOL
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	i : DINT;
	requestItem : POINTER TO OpcUaRequestItem;
	getNamespaceIndex : POINTER TO Tc3_PLCopen_OpcUa.UA_GetNamespaceIndex;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_State := OPC_UA_COMMUNICATOR_STATE.CONNECT;

_OperationTimer.Interval := T#1H;

_Connect(Execute := FALSE);

FOR i := 0 TO _NamespaceUris.Count - 1 DO
	getNamespaceIndex := _NamespaceUris.GetValueByIndex(i);
	
	getNamespaceIndex^(Execute := FALSE);
END_FOR

FOR i := 0 TO _RequestItems.Count - 1 DO
	requestItem := _RequestItems.Get(i);	
	requestItem^.Reset();
END_FOR

_TimeoutTimer.Start();

InternalStart := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalStop" Id="{f7848e6e-a5ad-4a76-b5f0-f68ad77880e8}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalStop]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _State OF
	OPC_UA_COMMUNICATOR_STATE.CONNECT, 
	OPC_UA_COMMUNICATOR_STATE.GET_NAMESPACE_INDEX,
	OPC_UA_COMMUNICATOR_STATE.GET_NODE_HANDLE:
		_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;
			
	OPC_UA_COMMUNICATOR_STATE.PERFORM_ACTION,
	OPC_UA_COMMUNICATOR_STATE.WAIT_FOR_NEXT_CYCLE:
		_State := OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE;
	
	OPC_UA_COMMUNICATOR_STATE.RELEASE_NODE_HANDLE:
		_State := OPC_UA_COMMUNICATOR_STATE.DISCONNECT;

	//OPC_UA_SINGLE_REQUEST_STATE.DISCONNECT:		
END_CASE

_OperationTimer.Stop();]]></ST>
      </Implementation>
    </Method>
    <Method Name="openConnection" Id="{e116fcf6-9cdd-4584-8b82-46d3d15ddeb1}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD PRIVATE openConnection : OPC_UA_ACTION_EXECUTION_STATE]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Disconnect(Execute := FALSE);
_Connect(Execute := TRUE);

IF _Connect.Error THEN
	LastExceptionHelper.Throw(_Connect.ErrorID, WStringHelper.Concat5("UA_Connect error ", TO_WSTRING(_Connect.ErrorID), " (ServerUrl = '", TO_WSTRING(_Connect.ServerUrl), "')"), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());			
	openConnection := OPC_UA_ACTION_EXECUTION_STATE.ERROR;
ELSIF _Connect.Done THEN
	openConnection := OPC_UA_ACTION_EXECUTION_STATE.DONE;
ELSE
	openConnection := OPC_UA_ACTION_EXECUTION_STATE.BUSY;
END_IF	]]></ST>
      </Implementation>
    </Method>
    <Method Name="performAction" Id="{d71c90c0-59d0-485b-af7e-d527788330bd}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD performAction : OPC_UA_ACTION_EXECUTION_STATE
VAR
	i : DINT;
	requestItem : POINTER TO OpcUaRequestItem;
	requestItemState : OPC_UA_ACTION_EXECUTION_STATE;	
	exception : Exception;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[performAction := OPC_UA_ACTION_EXECUTION_STATE.DONE;

FOR i := 0 TO _RequestItems.Count - 1 DO
	requestItem := _RequestItems.Get(i);
	
	requestItemState := requestItem^.PerformAction(exception => exception);
	
	CASE requestItemState OF
		OPC_UA_ACTION_EXECUTION_STATE.BUSY:
			IF performAction <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
				performAction := OPC_UA_ACTION_EXECUTION_STATE.BUSY;			
			END_IF
							
		OPC_UA_ACTION_EXECUTION_STATE.ERROR:
			IF performAction <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
				IF _LastException.Empty THEN
					_LastException := exception;				
				END_IF
				
				performAction := OPC_UA_ACTION_EXECUTION_STATE.ERROR;							
			END_IF
	END_CASE
END_FOR

IF performAction = OPC_UA_ACTION_EXECUTION_STATE.DONE THEN
	AdsLogger.LogMessage(LOGGING_LEVEL.INFORMATION, "---OpcUaRequest performAction done");
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="releaseNodeHandle" Id="{f11359b4-b622-4c0c-80c2-9f6b2e58f3f2}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD releaseNodeHandle : OPC_UA_ACTION_EXECUTION_STATE
VAR
	i : DINT;
	requestItem : POINTER TO OpcUaRequestItem;
	requestItemState : OPC_UA_ACTION_EXECUTION_STATE;	
	exception : Exception;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[releaseNodeHandle := OPC_UA_ACTION_EXECUTION_STATE.DONE;

FOR i := 0 TO _RequestItems.Count - 1 DO
	requestItem := _RequestItems.Get(i);
	
	requestItemState := requestItem^.ReleaseHandle(exception => exception);
	
	CASE requestItemState OF
		OPC_UA_ACTION_EXECUTION_STATE.BUSY:
			IF releaseNodeHandle <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
				releaseNodeHandle := OPC_UA_ACTION_EXECUTION_STATE.BUSY;			
			END_IF
							
		OPC_UA_ACTION_EXECUTION_STATE.ERROR:
			IF releaseNodeHandle <> OPC_UA_ACTION_EXECUTION_STATE.ERROR THEN
				IF _LastException.Empty THEN
					_LastException := exception;				
				END_IF
				
				releaseNodeHandle := OPC_UA_ACTION_EXECUTION_STATE.ERROR;							
			END_IF
	END_CASE
END_FOR

IF releaseNodeHandle = OPC_UA_ACTION_EXECUTION_STATE.DONE THEN
	AdsLogger.LogMessage(LOGGING_LEVEL.INFORMATION, "---OpcUaRequest releaseNodeHandle done");
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="resetAction" Id="{1f4a8139-d43b-40ea-a538-0afa1eb5e543}" FolderPath="Service members\">
      <Declaration><![CDATA[METHOD resetAction
VAR
	i : DINT;
	requestItem : POINTER TO OpcUaRequestItem;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO _RequestItems.Count - 1 DO
	requestItem := _RequestItems.Get(i);
	requestItem^.ResetAction();
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="VariablesCount" Id="{85713363-3b03-0c7a-02e1-cce11267d1bd}">
      <Declaration><![CDATA[PROPERTY VariablesCount : DINT]]></Declaration>
      <Get Name="Get" Id="{d5a97459-b115-091b-2e54-fe96c2644a8f}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[VariablesCount := _RequestItems.Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>