<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="OpcUaHelper" Id="{ae2f0ee6-2348-431c-b36f-097fcb0bbc8a}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM OpcUaHelper
VAR
	ClassName : STRING := __POUNAME();
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="GetShortUaIdentifierType" Id="{ea940f22-e23a-43f2-90e4-e7722e51fdfe}">
      <Declaration><![CDATA[METHOD GetShortUaIdentifierType : STRING(1)
VAR_INPUT
	identifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE identifierType OF
	Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_Numeric:
		GetShortUaIdentifierType := 'i';
		
	Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_String:
		GetShortUaIdentifierType := 's';
		
	Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_Opaque:
		GetShortUaIdentifierType := 'b';
		
	Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_GUID:
		GetShortUaIdentifierType := 'g';
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="ParceStringNodeId" Id="{d99e0826-d49f-4320-a816-6feb0ff09cbd}">
      <Declaration><![CDATA[METHOD ParceStringNodeId : Tc3_PLCopen_OpcUa.ST_UANodeID 
VAR_IN_OUT CONSTANT
	stringNodeId : STRING(1000); // like ns=6;s=Main.WeldConditionController.Configuration
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	namespacePart : STRING(10);
	identifierPart : STRING(1000);
	identifierTypePart : STRING(10);
	identifierPathPart : STRING(1000);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT Tc2_Utilities.FindAndSplitChar(';', ADR(stringNodeId), ADR(namespacePart), SIZEOF(namespacePart), ADR(identifierPart), SIZEOF(identifierPart), FALSE) THEN
	ExceptionHelper.Throw(0, "Symbol ';' is not found in string NodeId representation", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

namespacePart := Tc2_Utilities.F_ToLCase(namespacePart);

IF Tc2_Standard.FIND(namespacePart, 'ns=') <> 1 THEN
	ExceptionHelper.Throw(0, "Sring NodeId should start from 'ns='", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

namespacePart := Tc2_Standard.DELETE(namespacePart, 3, 1);

ParceStringNodeId.nNamespaceIndex := TO_UINT(namespacePart);

IF NOT Tc2_Utilities.FindAndSplitChar('=', ADR(identifierPart), ADR(identifierTypePart), SIZEOF(identifierTypePart), ADR(identifierPathPart), SIZEOF(identifierPathPart), FALSE) THEN
	ExceptionHelper.Throw(0, "Symbol '=' is not found in string NodeId representation", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

IF identifierPathPart = '' THEN
	ExceptionHelper.Throw(0, "Identifier type is empty", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;	
END_IF

ParceStringNodeId.sIdentifier := identifierPathPart;

IF identifierTypePart = 's' THEN
	ParceStringNodeId.eIdentifierType := Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_String;
ELSIF identifierTypePart = 'i' THEN
	ParceStringNodeId.eIdentifierType := Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_Numeric;
ELSIF identifierTypePart = 'g' THEN
	ParceStringNodeId.eIdentifierType := Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_GUID;
ELSIF identifierTypePart = 'b' THEN
	ParceStringNodeId.eIdentifierType := Tc3_PLCopen_OpcUa.E_UAIdentifierType.eUAIdentifierType_Opaque;
ELSE
	ExceptionHelper.Throw(0, WStringHelper.Concat3("Unknown identifier type '", TO_WSTRING(identifierTypePart), "'"), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>