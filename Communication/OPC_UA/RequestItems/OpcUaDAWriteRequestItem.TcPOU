<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="OpcUaDAWriteRequestItem" Id="{e3e8d40a-215f-401d-8ee6-38214d283f4c}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'enable_dynamic_creation'}	
FUNCTION_BLOCK OpcUaDAWriteRequestItem EXTENDS OpcUaDARequestItem
VAR
	_ClassName : STRING := __POUNAME();

	_Write : Tc3_PLCopen_OpcUa.UA_Write;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="ClassName" Id="{40b4228c-0576-46c6-89f7-8bb5492db6f1}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{1ed2d809-810b-438a-9368-803451eb5e7b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Initialize" Id="{1fbc5f53-e6fe-4be8-acbe-20048cbe21dd}">
      <Declaration><![CDATA[METHOD Initialize
VAR_INPUT
	namespaceUri : STRING(Tc2_System.MAX_STRING_LENGTH); // empty string if index used
	namespaceIndex : UINT; // zero if namespace uri used
	identifierType : Tc3_PLCopen_OpcUa.E_UAIdentifierType;
	identifier : STRING(Tc2_System.MAX_STRING_LENGTH);
	nodeAdditionalInfo : Tc3_PLCopen_OpcUa.ST_UANodeAdditionalInfo;
	sourceVariable : __SYSTEM.AnyType;
	operationTimeout : TIME := Tc2_System.DEFAULT_ADS_TIMEOUT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF namespaceUri <> '' THEN
	_NamespaceUri := namespaceUri;
	_NodeId.nNamespaceIndex := 0;
	_NamespaceIndexValid := FALSE;
ELSE
	_NamespaceUri := '';
	_NodeId.nNamespaceIndex := namespaceIndex;
	_NamespaceIndexValid := TRUE;
END_IF

_NodeId.eIdentifierType := identifierType;
_NodeId.sIdentifier := identifier;

_Write.stNodeAddInfo := nodeAdditionalInfo;
_Write.pVariable := sourceVariable.pValue;
_Write.cbData := TO_UDINT(sourceVariable.diSize);

_GetNodeHandle.Timeout := operationTimeout;
_Write.Timeout := operationTimeout;
_ReleaseNodeHandle.Timeout := operationTimeout;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PerformAction" Id="{eb3df5c7-c55f-4c68-95dc-373f94543e7d}">
      <Declaration><![CDATA[METHOD PerformAction : OPC_UA_ACTION_EXECUTION_STATE
VAR_OUTPUT
	exception : Exception;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[PerformAction := OPC_UA_ACTION_EXECUTION_STATE.DONE;
	
_Write(Execute := TRUE, ConnectionHdl := _ConnectionHandle, NodeHdl := _GetNodeHandle.NodeHdl);
		
IF _Write.Error THEN
	ExceptionHelper.Throw(_Write.ErrorID, WStringHelper.Concat5("UA_Write error ", TO_WSTRING(_Write.ErrorID), " (Node identifier = '", TO_WSTRING(_NodeId.sIdentifier), "')"), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());;					
	PerformAction := OPC_UA_ACTION_EXECUTION_STATE.ERROR;				
	AdsLogger.LogMessage(LOGGING_LEVEL.INFORMATION, WStringHelper.Concat3("---OpcUaRequest performAction error: ", "UA_Write error ", TO_WSTRING(_Write.ErrorID)));
ELSIF _Write.Busy THEN
	PerformAction := OPC_UA_ACTION_EXECUTION_STATE.BUSY;			
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ResetAction" Id="{f5d72c6d-a517-4822-b81c-08f52e85c8de}">
      <Declaration><![CDATA[METHOD ResetAction ]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Write(Execute := FALSE);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>