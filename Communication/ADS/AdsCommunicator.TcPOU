<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="AdsCommunicator" Id="{6381037c-07fb-46d5-ab99-0cc84a159f57}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call' := 'do not call this function block directly'} 
FUNCTION_BLOCK AdsCommunicator EXTENDS Communicator
VAR
	{attribute 'OPC.UA.DA' := '0'}	
	_ClassName : STRING := __POUNAME();

	{attribute 'OPC.UA.DA' := '0'}	
	_State : ADS_COMMUNICATOR_STATE;
	{attribute 'OPC.UA.DA' := '0'}	
	_DataProcessed : BOOL;

	{attribute 'OPC.UA.DA' := '0'}
	_Items : List(POINTER_TYPE.STRUCT_POINTER); // of ADS_REQUEST_ITEM 

	{attribute 'OPC.UA.DA' := '0'}	
	_OperationTimer : Timer;	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Internal overrides" Id="{c4f6490c-2d47-0b29-0798-ffbc4a5b3004}" />
    <Method Name="AddReadByIndexGroupAndOffset" Id="{93684116-4b52-41f9-b5ed-f40d460fd7d3}">
      <Declaration><![CDATA[METHOD AddReadByIndexGroupAndOffset : DINT
VAR_INPUT
	indexGroup : UDINT;
	indexOffset : UDINT;
	targetVariable : __SYSTEM.AnyType;
	receivedBytesCountTarget : POINTER TO UDINT;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	request : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddReadByIndexGroupAndOffset := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "AdsRequest is already executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

request := __NEW(ADS_REQUEST_ITEM);

request^.ReadMode := TRUE;
request^.ReadSymbolInfo.SYMNAME := '';
request^.Read.IDXGRP := indexGroup;
request^.Read.IDXOFFS := indexOffset;
request^.Read.DESTADDR := targetVariable.pValue;
request^.Read.LEN := TO_UDINT(targetVariable.diSize);
request^.Read.TMOUT := GetOperationTimeout(operationTimeout);
request^.IndexGroupAndOffsetValid := TRUE;
request^.ReceivedBytesCountTarget := receivedBytesCountTarget;

AddReadByIndexGroupAndOffset := _Items.Append(request);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddReadBySymbolName" Id="{e3fff92c-1f01-4e62-baa4-5507d3da9093}">
      <Declaration><![CDATA[METHOD AddReadBySymbolName : DINT
VAR_INPUT
	symbolName : Tc2_System.T_MaxString;
	targetVariable : __SYSTEM.AnyType;
	receivedBytesCountTarget : POINTER TO UDINT;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	request : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddReadBySymbolName := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "AdsRequest is already executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

IF SymbolName = '' THEN
	ExceptionHelper.Throw(0, "Parameter 'symbolName' is not specified", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

request := __NEW(ADS_REQUEST_ITEM);

request^.ReadMode := TRUE;
request^.ReadSymbolInfo.SYMNAME := symbolName;
request^.Read.IDXGRP := 0;
request^.Read.IDXOFFS := 0;
request^.Read.DESTADDR := targetVariable.pValue;
request^.Read.LEN := TO_UDINT(targetVariable.diSize);
request^.Read.TMOUT := GetOperationTimeout(operationTimeout);
request^.IndexGroupAndOffsetValid := FALSE;
request^.ReceivedBytesCountTarget := receivedBytesCountTarget;

AddReadBySymbolName := _Items.Append(request);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddWriteByIndexGroupAndOffset" Id="{568e933e-7a01-4d0c-bc0a-ab625e51e096}">
      <Declaration><![CDATA[METHOD AddWriteByIndexGroupAndOffset : DINT
VAR_INPUT
	indexGroup : UDINT;
	indexOffset : UDINT;
	sourceVariable : __SYSTEM.AnyType;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	request : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddWriteByIndexGroupAndOffset := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "AdsRequest is already executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

request := __NEW(ADS_REQUEST_ITEM);

request^.ReadMode := FALSE;
request^.ReadSymbolInfo.SYMNAME := '';
request^.Write.IDXGRP := indexGroup;
request^.Write.IDXOFFS := indexOffset;
request^.Write.SRCADDR := sourceVariable.pValue;
request^.Write.LEN := TO_UDINT(sourceVariable.diSize);
request^.Write.TMOUT := GetOperationTimeout(operationTimeout);
request^.IndexGroupAndOffsetValid := TRUE;

AddWriteByIndexGroupAndOffset := _Items.Append(request);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddWriteBySymbolName" Id="{e82b5323-4c36-489f-b448-92e2c448716c}">
      <Declaration><![CDATA[METHOD AddWriteBySymbolName : DINT
VAR_INPUT
	symbolName : Tc2_System.T_MaxString;
	sourceVariable : __SYSTEM.AnyType;
	operationTimeout : TIME := T#0S;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	request : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AddWriteBySymbolName := -1;

IF Busy THEN
	ExceptionHelper.Throw(0, "AdsRequest is already executing", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

IF SymbolName = '' THEN
	ExceptionHelper.Throw(0, "Parameter 'symbolName' is not specified", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

request := __NEW(ADS_REQUEST_ITEM);

request^.ReadMode := FALSE;
request^.ReadSymbolInfo.SYMNAME := symbolName;
request^.Write.IDXGRP := 0;
request^.Write.IDXOFFS := 0;
request^.Write.SRCADDR := sourceVariable.pValue;
request^.Write.LEN := TO_UDINT(sourceVariable.diSize);
request^.Write.TMOUT := GetOperationTimeout(operationTimeout);
request^.IndexGroupAndOffsetValid := FALSE;

AddWriteBySymbolName := _Items.Append(request);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Busy" Id="{66418465-85e6-4646-b907-a3e0ea2e075f}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Property' := '1'}
PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{c60005fe-6d04-4d60-a421-8a6c73719064}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Busy := _LastException.Empty AND_THEN _State <> ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ClassName" Id="{a21c6b69-187e-417f-8ef1-ea132932f274}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY ClassName : STRING]]></Declaration>
      <Get Name="Get" Id="{4c9fa909-58fb-447e-929a-5c4be661ed43}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[ClassName := _ClassName;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="CommunicationTypeName" Id="{129c50be-baa5-438d-bdce-285313788430}">
      <Declaration><![CDATA[PROPERTY CommunicationTypeName : STRING]]></Declaration>
      <Get Name="Get" Id="{ece8a46f-5126-4616-8635-712ae8dae55c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[CommunicationTypeName := 'ADS';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="DataProcessed" Id="{5bbfe512-c0b3-4ad1-b645-5e38c49edc10}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Property' := '1'}
PROPERTY DataProcessed : BOOL]]></Declaration>
      <Get Name="Get" Id="{160341be-f624-4a53-adf9-42f8ae00e653}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataProcessed := _DataProcessed;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{ee029345-78f2-4e8e-a663-bbc6deeeec9a}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA' := '1'}
{attribute 'OPC.UA.DA.Property' := '1'}
PROPERTY Error : BOOL]]></Declaration>
      <Get Name="Get" Id="{aab8f803-8bfc-48e4-a527-38c01d5df9ea}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Error := NOT _LastException.Empty;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Execute" Id="{89756433-25f4-4839-9c3c-fa00ffd6961f}">
      <Declaration><![CDATA[METHOD Execute 
VAR
	i : DINT;
	readyItemsCount : DINT;
	item : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_DataProcessed := FALSE;
_OperationTimer.Execute();

StateMachine:

readyItemsCount := 0;

CASE _State OF
	ADS_COMMUNICATOR_STATE.READ_SYMBOL_INFO:
		FOR i := 0 TO _Items.Count - 1 DO
			item := _Items.Get(i); 
			
			IF NOT item^.IndexGroupAndOffsetValid THEN
				item^.ReadSymbolInfo(START := TRUE);
				
				IF item^.ReadSymbolInfo.ERR THEN
					_LastExceptionHelper.Throw(item^.ReadSymbolInfo.ERRID, WStringHelper.Concat2("Execution of PLC_ReadSymInfoByName failed with error id = ", TO_WSTRING(item^.ReadSymbolInfo.ERRID)), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());	
					_State := ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;
					RETURN;
				ELSIF NOT item^.ReadSymbolInfo.BUSY THEN
					IF item^.ReadMode THEN
						item^.Read.IDXGRP := item^.ReadSymbolInfo.SYMINFO.idxGroup;
						item^.Read.IDXOFFS := item^.ReadSymbolInfo.SYMINFO.idxOffset;
					ELSE
						item^.Write.IDXGRP := item^.ReadSymbolInfo.SYMINFO.idxGroup;
						item^.Write.IDXOFFS := item^.ReadSymbolInfo.SYMINFO.idxOffset;
					END_IF		

					item^.IndexGroupAndOffsetValid := TRUE;	
					readyItemsCount := readyItemsCount + 1;
				END_IF
			ELSE
				readyItemsCount := readyItemsCount + 1;
			END_IF
		END_FOR
		
		IF readyItemsCount = _Items.Count THEN	
			_State := ADS_COMMUNICATOR_STATE.DATA_PROCESSING;				
			_OperationTimer.Start();
			JMP StateMachine;
		END_IF		
		
	ADS_COMMUNICATOR_STATE.DATA_PROCESSING:
		FOR i := 0 TO _Items.Count - 1 DO
			item := _Items.Get(i); 
			
			IF item^.ReadMode THEN
				item^.Read(READ := TRUE);
				
				IF item^.Read.ERR THEN
					_LastExceptionHelper.Throw(item^.Read.ERRID, WStringHelper.Concat2("Execution of ADSREADEX failed with error id = ", TO_WSTRING(item^.Read.ERRID)), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
					_State := ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;
					RETURN;
				ELSIF NOT item^.Read.BUSY THEN
					IF item^.ReceivedBytesCountTarget <> 0 THEN
						item^.ReceivedBytesCountTarget^ := item^.Read.COUNT_R;
					END_IF
					
					readyItemsCount := readyItemsCount + 1;
				END_IF
			ELSE
				item^.Write(WRITE := TRUE);
				
				IF item^.Write.ERR THEN
					_LastExceptionHelper.Throw(item^.Write.ERRID, WStringHelper.Concat2("Execution of ADSWRITE failed with error id = ", TO_WSTRING(item^.Write.ERRID)), __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
					_State := ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;
					RETURN;
				ELSIF NOT item^.Write.BUSY THEN
					readyItemsCount := readyItemsCount + 1;
				END_IF
			END_IF
		END_FOR
		
		IF readyItemsCount = _Items.Count THEN
			_DataProcessed := TRUE;	
			CycleCount := CycleCount + 1;
			
			IF CyclicMode THEN
				_State := ADS_COMMUNICATOR_STATE.WAIT_FOR_NEXT_CYCLE;	
				JMP StateMachine;			
			ELSE	
				_State := ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;		
			END_IF
		END_IF	
		
	ADS_COMMUNICATOR_STATE.WAIT_FOR_NEXT_CYCLE:
		IF _OperationTimer.ElapsedTime >= CycleInterval THEN
			FOR i := 0 TO _Items.Count - 1 DO
				item := _Items.Get(i); 
				
				IF item^.ReadMode THEN
					item^.Read(READ := FALSE);
				ELSE
					item^.Write(WRITE := FALSE);
				END_IF
			END_FOR	
			
			_State := ADS_COMMUNICATOR_STATE.DATA_PROCESSING;
			_OperationTimer.Start();			
			JMP StateMachine;	
		END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{91e8f214-1af0-496a-bb2f-0cbebe45044a}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Items.Clear(TRUE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalClear" Id="{6cb1102b-46db-484e-81a2-fb0235427166}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalClear : BOOL
VAR_OUTPUT
	exception : Exception;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_Items.Clear(TRUE);

_State := ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;

InternalClear := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalConfigure" Id="{a035b76e-ce5a-4475-9823-6f5e7fc270c7}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalConfigure : BOOL
VAR_INPUT
	settings : REFERENCE TO CommunicationSettings;
END_VAR
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	adsSettings : POINTER TO AdsCommunicationSettings;
	i : DINT;
	item : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[adsSettings := ADR(settings);

_OperationTimer.Interval := T#1H;

IF adsSettings^.AmsPort = 0 THEN
	ExceptionHelper.Throw(0, "settings.AmsPort is not specified", __POUNAME(), ClassName, CurrentNamespace.Name, __POSITION());
	RETURN;
END_IF

FOR i := 0 TO _Items.Count - 1 DO
	item := _Items.Get(i);
	
	item^.ReadSymbolInfo(NETID := adsSettings^.AmsNetId, PORT := adsSettings^.AmsPort);		
	item^.Read(NETID := adsSettings^.AmsNetId, PORT := adsSettings^.AmsPort);
	item^.Write(NETID := adsSettings^.AmsNetId, PORT := adsSettings^.AmsPort);
END_FOR

InternalConfigure := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalStart" Id="{b6eac231-d625-4df9-b4b5-84a582820366}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalStart : BOOL
VAR_OUTPUT
	exception : Exception;
END_VAR
VAR
	i : DINT;
	item : POINTER TO ADS_REQUEST_ITEM;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_State := ADS_COMMUNICATOR_STATE.READ_SYMBOL_INFO;

FOR i := 0 TO _Items.Count - 1 DO
	item := _Items.Get(i);
	
	item^.ReadSymbolInfo(START := FALSE);	
	
	IF item^.ReadMode THEN
		item^.Read(READ := FALSE);
	ELSE
		item^.Write(WRITE := FALSE);
	END_IF
END_FOR

InternalStart := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalStop" Id="{5f427515-1959-4bae-9065-52ba8805968b}" FolderPath="Internal overrides\">
      <Declaration><![CDATA[METHOD PROTECTED InternalStop]]></Declaration>
      <Implementation>
        <ST><![CDATA[_State := ADS_COMMUNICATOR_STATE.IDLE_OR_DONE;
_OperationTimer.Stop();]]></ST>
      </Implementation>
    </Method>
    <Property Name="VariablesCount" Id="{a6553ee8-93e1-4733-b704-ac8c20f5b6b7}">
      <Declaration><![CDATA[PROPERTY VariablesCount : DINT]]></Declaration>
      <Get Name="Get" Id="{c15dc052-a6fa-47b3-b63d-c5f35d3b4f10}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[VariablesCount := _Items.Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>