<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="ProgramStateMachine" Id="{348d05c1-8e58-482b-bdb5-76630d265b56}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT ProgramStateMachine EXTENDS FiniteStateMachine
VAR
	{attribute 'OPC.UA.DA' := '0'}
	_HaltedState : REFERENCE TO HaltedProgramState;
	{attribute 'OPC.UA.DA' := '0'}
	_ReadyState : REFERENCE TO ReadyProgramState;
	{attribute 'OPC.UA.DA' := '0'}
	_RunningState : REFERENCE TO RunningProgramState;
	{attribute 'OPC.UA.DA' := '0'}
	_SuspendedState : REFERENCE TO SuspendedProgramState;
	
	{attribute 'OPC.UA.DA' := '0'}
	_HaltedToReady : REFERENCE TO HaltedToReadyProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_ReadyToRunning : REFERENCE TO ReadyToRunningProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_RunningToHalted : REFERENCE TO RunningToHaltedProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_RunningToReady : REFERENCE TO RunningToReadyProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_RunningToSuspended : REFERENCE TO RunningToSuspendedProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_SuspendedToRunning : REFERENCE TO SuspendedToRunningProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_SuspendedToHalted : REFERENCE TO SuspendedToHaltedProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_SuspendedToReady : REFERENCE TO SuspendedToReadyProgramTransition;
	{attribute 'OPC.UA.DA' := '0'}
	_ReadyToHalted : REFERENCE TO ReadyToHaltedProgramTransition;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="AvailableStateCount" Id="{b5ea9990-53c8-4465-bd83-57b73c14ae26}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY AvailableStateCount : INT (0..(ProgramConstants.MaxStateCount - 1))]]></Declaration>
      <Get Name="Get" Id="{d3cbaf7a-f384-4a2f-a4f8-4161e40466bb}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AvailableStateCount := 4;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="AvailableTransitionCount" Id="{d0328d6c-5a45-4797-a774-aca6a5ff287e}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
{attribute 'OPC.UA.DA.Property' := '1'}
{attribute 'OPC.UA.DA.Access' := '1'}
PROPERTY AvailableTransitionCount : INT (0..(ProgramConstants.MaxTransitionCount - 1))]]></Declaration>
      <Get Name="Get" Id="{79806c27-1e30-4685-9113-47142588f040}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[AvailableTransitionCount := 9;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetStateAndTransitionInstances" Id="{022e5ea7-438a-4f42-938b-39a291aefa16}">
      <Declaration><![CDATA[METHOD PROTECTED ABSTRACT GetStateAndTransitionInstances
VAR_OUTPUT
	haltedState : POINTER TO HaltedProgramState;
	readyState : POINTER TO ReadyProgramState;
	runningState : POINTER TO RunningProgramState;
	suspendedState : POINTER TO SuspendedProgramState;
	
	haltedToReady : POINTER TO HaltedToReadyProgramTransition;
	readyToRunning : POINTER TO ReadyToRunningProgramTransition;
	runningToHalted : POINTER TO RunningToHaltedProgramTransition;
	runningToReady : POINTER TO RunningToReadyProgramTransition;
	runningToSuspended : POINTER TO RunningToSuspendedProgramTransition;
	suspendedToRunning : POINTER TO SuspendedToRunningProgramTransition;
	suspendedToHalted : POINTER TO SuspendedToHaltedProgramTransition;
	suspendedToReady : POINTER TO SuspendedToReadyProgramTransition;
	readyToHalted : POINTER TO ReadyToHaltedProgramTransition;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Halt" Id="{97c40d13-6b42-4f5f-be92-a8f7353bbeca}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD FINAL Halt : BOOL
VAR_OUTPUT
	errorMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	FindTransitionByCause(__POUNAME());
	RequestedCause := __POUNAME();
	Halt := TRUE;
__CATCH
	errorMessage := ExceptionHelper.LastException.ToString(FALSE);
	ExceptionHelper.Cleanup();
__ENDTRY]]></ST>
      </Implementation>
    </Method>
    <Method Name="InternalInitialize" Id="{4fab7984-cea9-4d83-921e-4279fefbd84b}">
      <Declaration><![CDATA[METHOD PROTECTED InternalInitialize 
VAR_OUTPUT
	states : ARRAY [0..ProgramConstants.MaxStateCount - 1] OF POINTER TO ProgramState;
	transitions : ARRAY [0..ProgramConstants.MaxTransitionCount - 1] OF POINTER TO ProgramTransition;
	defaultState : POINTER TO ProgramState;
END_VAR
VAR
	haltedState : POINTER TO HaltedProgramState;
	readyState : POINTER TO ReadyProgramState;
	runningState : POINTER TO RunningProgramState;
	suspendedState : POINTER TO SuspendedProgramState;
	
	haltedToReady : POINTER TO HaltedToReadyProgramTransition;
	readyToRunning : POINTER TO ReadyToRunningProgramTransition;
	runningToHalted : POINTER TO RunningToHaltedProgramTransition;
	runningToReady : POINTER TO RunningToReadyProgramTransition;
	runningToSuspended : POINTER TO RunningToSuspendedProgramTransition;
	suspendedToRunning : POINTER TO SuspendedToRunningProgramTransition;
	suspendedToHalted : POINTER TO SuspendedToHaltedProgramTransition;
	suspendedToReady : POINTER TO SuspendedToReadyProgramTransition;
	readyToHalted : POINTER TO ReadyToHaltedProgramTransition;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetStateAndTransitionInstances(	
	haltedState => haltedState, 
	readyState => readyState, 
	runningState => runningState, 
	suspendedState => suspendedState,
	
	haltedToReady => haltedToReady,
	readyToRunning => readyToRunning,
	runningToHalted => runningToHalted,
	runningToReady => runningToReady,
	runningToSuspended => runningToSuspended,
	suspendedToRunning => suspendedToRunning,
	suspendedToHalted => suspendedToHalted,
	suspendedToReady => suspendedToReady,
	readyToHalted => readyToHalted
);	

_HaltedState REF= haltedState^;
_ReadyState REF= readyState^;
_RunningState REF= runningState^;
_SuspendedState REF= suspendedState^;

_HaltedToReady REF= haltedToReady^;
_ReadyToRunning REF= readyToRunning^;
_RunningToHalted REF= runningToHalted^;
_RunningToReady REF= runningToReady^;
_RunningToSuspended REF= runningToSuspended^;
_SuspendedToRunning REF= suspendedToRunning^;
_SuspendedToHalted REF= suspendedToHalted^;
_SuspendedToReady REF= suspendedToReady^;
_ReadyToHalted REF= readyToHalted^;

states[0] := haltedState;
states[1] := readyState;
states[2] := runningState;
states[3] := suspendedState;

transitions[0] := haltedToReady;
transitions[1] := readyToRunning;
transitions[2] := runningToHalted;
transitions[3] := runningToReady;
transitions[4] := runningToSuspended;
transitions[5] := suspendedToRunning;
transitions[6] := suspendedToHalted;
transitions[7] := suspendedToReady;
transitions[8] := readyToHalted;

defaultState := readyState;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{485d4852-7efc-4ca3-9a32-47dda8890223}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD FINAL Reset : BOOL
VAR_OUTPUT
	errorMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	FindTransitionByCause(__POUNAME());
	RequestedCause := __POUNAME();
	Reset := TRUE;
__CATCH
	errorMessage := ExceptionHelper.LastException.ToString(FALSE);
	ExceptionHelper.Cleanup();
__ENDTRY]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resume" Id="{8812b9d7-578a-440f-8a54-19174bf6f0b7}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD FINAL Resume : BOOL
VAR_OUTPUT
	errorMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	FindTransitionByCause(__POUNAME());
	RequestedCause := __POUNAME();
	Resume := TRUE;	
__CATCH
	errorMessage := ExceptionHelper.LastException.ToString(FALSE);
	ExceptionHelper.Cleanup();
__ENDTRY]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{dc7cbb40-a364-4453-86bd-236b1f1f3947}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD FINAL Start: BOOL
VAR_OUTPUT
	errorMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	FindTransitionByCause(__POUNAME());
	RequestedCause := __POUNAME();
	Start := TRUE;
__CATCH
	errorMessage := ExceptionHelper.LastException.ToString(FALSE);
	ExceptionHelper.Cleanup();
__ENDTRY]]></ST>
      </Implementation>
    </Method>
    <Method Name="Suspend" Id="{84f8f61e-9003-4c4d-88db-a8a5243e14d4}">
      <Declaration><![CDATA[{attribute 'TcRpcEnable':='1'}
METHOD FINAL Suspend : BOOL
VAR_OUTPUT
	errorMessage : ERROR_MESSAGE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[__TRY
	FindTransitionByCause(__POUNAME());
	RequestedCause := __POUNAME();
	Suspend := TRUE;
__CATCH
	errorMessage := ExceptionHelper.LastException.ToString(FALSE);
	ExceptionHelper.Cleanup();
__ENDTRY]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>